@page "/goods/categories/subcategories/brands"
@attribute [Authorize(Roles = "Admin, Manager")]

<h2>All Brands</h2>

<EditForm Model="@Brand" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="d-flex flex-wrap">

        <div class="row flex-fill m-1">
            <InputText @bind-Value="Brand.Name" class="form-control col" placeholder="Brand name" />
            @if (Subcategories != null)
            {
                <select @bind="Brand.SubcategoryId" class="form-control col" placeholder="Select subcategory">
                    <option value="" selected disabled>Choose subcategory</option>
                    @foreach (var subcategory in Subcategories)
                    {
                        <option value="@subcategory.Id">@subcategory.Name</option>
                    }
                </select>
            }
        </div>
        <div class="row flex-fill m-1">
            <InputFile OnChange="OnInputFileChange" class="form-control col-8" accept=".jpg, .jpeg, .png" />

            <button type="submit" class="btn-sm custom-bg-orange text-white col-4" disabled="@Submitting">
                Add
                @if (Submitting)
                {
                    <span class="spinner-border spinner-border-sm"></span>
                }
            </button>
        </div>

    </div>

</EditForm>
<br />
<div class="row">
    <div class="col-lg-2 col-md-3">
        <div class="d-none d-md-block">
            <div class="card border-0 shadow">
                <div class="card-body p-2">
                    <GoodsNavMenu />
                </div>
            </div>

        </div>
    </div>
    <div class="col-lg-10 col-md-9 mb-3 p-1">

        <div id="filtersNav" class="filters-nav bg-white d-md-none">
            <button class="btn closebtn custom-nav-link" onclick="closeNav()">&times;</button>
            <GoodsNavMenu />
        </div>
        @if (file != null)
        {
            <img src="@ImageDataUrl" class="img-thumbnail mx-auto d-block img-fluid m-2" />
        }

        @if (Error == true)
        {
            <div class="alert alert-warning col-md-6">
                <button type="button" @onclick="(() => { Error = null; })" class="close">&times;</button>
                @Response
            </div>

        }
        else if (Error == false)
        {
            <div class="alert alert-success col-md-6">
                <button type="button" @onclick="(() => { Error = null; })" class="close">&times;</button>
                @Response
            </div>
        }

        <div class="card border-0">
            <div class="card-header bg-white">
                <span class="custom-bg-orange text-white p-2 mr-3 rounded d-md-none" style="cursor:pointer" onclick="openNav()"><strong>&#9776;</strong> </span>
                <span class="card-title"><strong> SORT BY</strong> </span>

                <button class="btn custom-bg-orange text-white ml-1" @onclick="SortByName">NAME @sortByName</button>
                <button class="btn custom-bg-orange text-white ml-1" @onclick="SortByGoods">Goods @sortByGoods</button>

                <button class="btn custom-bg-orange text-white ml-1 float-right" disabled="@IsLoading" @onclick="GetBrands">
                    Reload

                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    else
                    {
                        <span class="oi oi-reload"></span>
                    }
                </button>
            </div>
            <div class="card-body">
                @if (GoodBrands == null)
                {
                    <div>
                        <span class="spinner-border spinner-border-sm"></span>
                        <em>Loading...</em>
                    </div>
                }
                else
                {
                    <div class="row">
                        @foreach (var brand in GoodBrands)
                        {
                            <div class="col-lg-2 col-sm-3 col-4 rounded p-1">
                                <div class="card border-0 custom-hover-shadow h-100">
                                    <div class="card-body p-1">
                                        @{
                                            var source = $"{BaseApi.Url}{BaseApi.ItemsPhotosApi}/{brand.Image.Name}";
                                            <img src="@source" alt="@brand.Name" class="mx-auto d-block custom-display-image rounded" />
                                        }
                                        <div class="card-title"><strong>Name: </strong>@brand.Name</div>
                                        <div class="card-text"><strong>Subcategory: </strong>@brand.Subcategory?.Name</div>
                                        <div class="card-text"><strong>Goods: </strong>@brand.Goods?.Count</div>
                                    </div>
                                    <div class="card-footer border-0 bg-white p-1 d-flex">
                                        <button @onclick="() => ShowModal(brand)" class="btn-sm custom-bg-orange text-white m-1 flex-fill" data-toggle="modal" data-target="#editModal">Edit</button>
                                        <button @onclick="() => ShowModal(brand)" class="btn-sm btn-danger m-1 flex-fill" data-toggle="modal" data-target="#deleteModal">Delete</button>
                                    </div>
                                </div>
                            </div>

                        }
                    </div>
                    <!-- Edit category -->

                    <div class="modal fade" id="editModal">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">

                                <!-- Modal Header -->
                                <div class="modal-header">
                                    <h4 class="modal-title">Edit subcategory</h4>
                                    <button type="button" class="close" data-dismiss="modal" @onclick="CloseModal">&times;</button>
                                </div>

                                <!-- Modal body -->
                                <div class="modal-body">
                                    @{
                                        var img = $"{BaseApi.Url}{BaseApi.ItemsPhotosApi}/{Brand.Image?.Name}";
                                        <EditBrand Brand="@Brand" Subcategories="@Subcategories" Error="@null" ImageDataUrl="@img" />
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- End edit category -->
                    <!-- Delete category -->

                    <div class="modal fade" id="deleteModal">
                        <div class="modal-dialog modal-dialog-centered">
                            <div class="modal-content">

                                <!-- Modal Header -->
                                <div class="modal-header">
                                    <h4 class="modal-title">Delete subcategory</h4>
                                    <button type="button" class="close" data-dismiss="modal" @onclick="CloseModal">&times;</button>
                                </div>

                                <!-- Modal body -->
                                <div class="modal-body">
                                    <DeleteBrand Brand="@Brand" />
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- End delete category -->
                }
            </div>
        </div>
    </div>
</div>

@code{
    private List<GoodBrand> GoodBrands { get; set; }
    private List<GoodSubcategory> Subcategories { get; set; }

    private GoodBrand Brand { get; set; } = new GoodBrand();
    private bool? Error { get; set; }
    private bool Submitting { get; set; }
    private bool IsLoading { get; set; }
    private string Response { get; set; }
    private string ImageDataUrl { get; set; }
    private string sortByName = "";
    private string sortByGoods = "";

    byte[] file;

    protected override async Task OnInitializedAsync()
    {
        await CloseModal();
        await GetSubcategory();
    }

    private async Task GetBrands()
    {
        try
        {
            IsLoading = true;
            GoodBrands = await _httpClient.GetFromJsonAsync<List<GoodBrand>>($"api/GoodsBrands");
            IsLoading = false;
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            IsLoading = false;
            Console.WriteLine(ex.Message);
        }

    }

    private async Task GetSubcategory()
    {
        try
        {
            Subcategories = await _httpClient.GetFromJsonAsync<List<GoodSubcategory>>($"api/GoodsSubcategories");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (file == null)
        {
            Error = true;
            Response = "No file chosen";
            return;
        }

        Submitting = true;
        Error = null;

        string fileName = "image.png";
        var content = new MultipartFormDataContent { { new ByteArrayContent(file), "formFile", fileName } };
        content.Add(new StringContent(Brand.Name), "name");
        content.Add(new StringContent(Brand.SubcategoryId.ToString()), "subcategoryId");

        try
        {
            var result = await _httpClient.PostAsync($"api/GoodsBrands", content);

            Submitting = false;
            if (result.IsSuccessStatusCode)
            {
                file = null;
                Error = false;
                Response = await result.Content.ReadAsStringAsync();
                await GetBrands();
            }
            else
            {
                Error = true;
                Response = await result.Content.ReadAsStringAsync();
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var format = "image/png";

        var resizedImageFile = await imageFile.RequestImageFileAsync(format, 200, 150);
        file = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(file);

        ImageDataUrl = $"data:{format};base64,{Convert.ToBase64String(file)}";
    }

    private void ShowModal(GoodBrand brand)
    {
        Brand = brand;
    }

    private async Task CloseModal()
    {
        ImageDataUrl = null;
        Error = null;
        Response = null;
        Brand = new GoodBrand();
        await GetBrands();
    }

    private void SortByName()
    {
        if (sortByName == "" || sortByName == "Z - A")
        {
            sortByName = "A - Z";
            GoodBrands = GoodBrands.OrderBy(x => x.Name).ToList();
        }
        else
        {
            sortByName = "Z - A";
            GoodBrands = GoodBrands.OrderByDescending(x => x.Name).ToList();
        }
    }

    private void SortByGoods()
    {
        if (sortByGoods == "" || sortByGoods == "H - L")
        {
            sortByGoods = "L - H";
            GoodBrands = GoodBrands.OrderBy(x => x.Goods.Count).ToList();
        }
        else
        {
            sortByGoods = "H - L";
            GoodBrands = GoodBrands.OrderByDescending(x => x.Goods.Count).ToList();
        }
    }
}
