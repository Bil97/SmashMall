@if (Error == true)
{
    <div class="alert alert-warning alert-dismissible">
        <button type="button" @onclick="(() => { Error = null; })" class="close">&times;</button>
        @Response
    </div>
}
@if (Error == false)
{
    <div class="alert alert-success alert-dismissible">
        <button class="close" @onclick="(() => { Error = null; })">&times;</button>
        @Response
    </div>
}

@if (documents == null)
{
    <em>Nothing to display</em>
}
else
{
    <ul>
        @foreach (var document in documents)
        {
            var path = $"{BaseApi.Url}{BaseApi.GoodsDocumentsApi}/document/{document.Name}";
            <li>
                <a href="@path" download>@document.Name</a>
            </li>
        }
    </ul>
}
<AuthorizeView>
    @if (Good?.UserDetails?.UserName == context.User.Identity.Name)
    {
        <div class="input-group mb-3">
            <InputFile class="form-control-file border" OnChange="OnInputFileChange" disabled="@Submitting" multiple />
        </div>
    }
</AuthorizeView>

@code {
    [Parameter]
    public Good Good { get; set; }
    [Parameter]
    public bool? Error { get; set; }
    private bool Submitting { get; set; }
    private string Response { get; set; }
    private List<GoodDocument> documents = new List<GoodDocument>();

    protected override void OnInitialized()
    {
        documents = Good.Documents.ToList();
    }

    private async Task GetDocuments()
    {
        try
        {
            documents = await _httpClient.GetFromJsonAsync<List<GoodDocument>>($"{BaseApi.GoodsDocumentsApi}/{Good.Id}");
        }
        catch (AccessTokenNotAvailableException ex) { ex.Redirect(); }
        catch (Exception ex) { Console.WriteLine("Error: " + ex.Message); };
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            Submitting = true;
            Error = null;

            MultipartFormDataContent content = new MultipartFormDataContent();
            content.Add(new StringContent(Good.Id.ToString()), "goodId");
            foreach (var file in e.GetMultipleFiles())
            {
                var byteArray = new byte[file.Size];
                await file.OpenReadStream().ReadAsync(byteArray);
                content.Add(new ByteArrayContent(byteArray), "formfile", file.Name);
            }

            var result = await _httpClient.PostAsync($"{BaseApi.Url}{BaseApi.GoodsDocumentsApi}", content);
            Response = await result.Content.ReadAsStringAsync();
            Submitting = false;

            if (result.IsSuccessStatusCode)
            {
                await GetDocuments();
                Error = false;
            }
            else
            {
                Error = true;
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

}
