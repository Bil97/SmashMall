
<div class="card border-0">
    <div class="card-header bg-white">
        <span class="card-title"><strong> SORT BY</strong> </span>

        <button class="btn custom-bg-orange text-white ml-1" @onclick="SortByName">NAME @sortByName</button>

        <button class="btn custom-bg-orange text-white ml-1" @onclick="SortByPrice">PRICE @sortByPrice </button>

        <button class="btn custom-bg-orange text-white float-right" disabled="@IsLoading" @onclick="GetGoods">
            Reload

            @if (IsLoading)
            {
                <span class="spinner-border spinner-border-sm"></span>
            }
            else
            {
                <span class="oi oi-reload"></span>
            }
        </button>
    </div>
    <div class="card-body">
        @if (AllGoods == null)
        {
            <em>Loading...</em>
        }
        else if (AllGoods?.Count == 0)
        {
            <div class="text-center">There are no goods available for display</div>
        }
        else
        {
            <div class="row">
                @foreach (var good in AllGoods)
                {
                    <div class="col-lg-2 col-sm-3 col-4 rounded p-1">
                        <div class="card border-0 custom-hover-shadow h-100">
                            <div class="card-body p-1">
                                <a href="goods/@good.Id/description" class="custom-nav-link">
                                    @{var source = $"{BaseApi.Url}{BaseApi.ItemsPhotosApi}/{good.Good.Images.FirstOrDefault().Name}";
                                        <img src="@source" alt="@good.Good.Name" class="mx-auto d-block custom-display-image rounded">
                                    }

                                    <div class="card-title">@good.Good.Name</div>
                                </a>
                                @{ var originalPrice = new CurrencyConverter(good.Good.Price, BaseApi.Culture);}
                                @if (good.Good.Discount > 0)
                                {
                                    <div class="card-text">
                                        <del>@originalPrice.Currency</del> <span class="custom-bg-orange float-right">-@good.Good.Discount</span>
                                    </div>
                                    var discount = (decimal)(100 - good.Good.Discount);
                                    var price = discount / 100 * good.Good.Price;
                                    var priceWithDiscount = new CurrencyConverter(price, BaseApi.Culture);
                                    <div class="card-text"><strong>@priceWithDiscount.Currency</strong></div>
                                }
                                else
                                {
                                    <div class="card-text"><strong>@originalPrice.Currency</strong></div>
                                }

                                <div class="card-text">
                                    Save for later <input type="checkbox" checked="@good.Good.IsSaved" @onchange="(e => SaveGood(good.GoodId))" />
                                </div>
                                @if (good.Good.UserDetails.Roles.Contains("Admin"))
                                {
                                    <div class="card-text">
                                        <em>Sold by: </em><span>SmashMall</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="card-text">
                                        <em>Sold by: </em>@good.Good.UserDetails.Name
                                    </div>
                                }
                                @if (good.Good.Quantity <= 1)
                                {
                                    <div class="card-text">Out of stock</div>
                                }
                                else
                                {
                                    <div class="card-text">@good.Good.Quantity in stock</div>
                                }
                            </div>
                            <div class="card-footer border-0 bg-white p-1">
                                @if (good.Good.Quantity >= 1)
                                {
                                    <button class="btn btn-block custom-bg-orange text-white" @onclick="() => AddToCart(good.Good)">Add to cart</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>
@code {
    private bool IsLoading { get; set; }
    private List<GoodSaved> AllGoods { get; set; }
    private string sortByPrice = "";
    private string sortByName = "";

    protected override async Task OnInitializedAsync()
    {
        await GetGoods();
    }

    private async Task GetGoods()
    {
        IsLoading = true;
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var result = await _httpClient.GetAsync($"api/Goods/saved");

            IsLoading = false;
            if (result.IsSuccessStatusCode)
            {
                using var stream = await result.Content.ReadAsStreamAsync();

                AllGoods = await System.Text.Json.JsonSerializer.DeserializeAsync<List<GoodSaved>>(stream,
                 new System.Text.Json.JsonSerializerOptions
                 {
                     PropertyNameCaseInsensitive = true
                 });
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch { }
    }
    private async Task RemoveSavedGood(string goodId)
    {
        try
        {
            await _httpClient.DeleteAsync($"api/Goods/saved/{goodId}");
            await GetGoods();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task AddToCart(Good good)
    {
        try
        {
            var userId = await _localStorage.GetItemAsStringAsync("userId");
            var result = await _http.Client.PostAsJsonAsync<Good>($"api/cart/{userId}", good);

            if (result.IsSuccessStatusCode)
            {
                var cart = await result.Content.ReadFromJsonAsync<CartModel>();
                await _localStorage.SetItemAsync("userId", cart.UserId);
                StateContainer.SetCount(cart.ItemsCount);
                StateContainer.SetPrice(cart.TotalPrice);
            }
        }
        catch { }
    }

    private void SortByPrice()
    {
        if (sortByPrice == "" || sortByPrice == "H - L")
        {
            sortByPrice = "L - H";
            AllGoods = AllGoods.OrderBy(x => x.Good.Price).ToList();
        }
        else
        {
            sortByPrice = "H - L";
            AllGoods = AllGoods.OrderByDescending(x => x.Good.Price).ToList();
        }
    }

    private void SortByName()
    {
        if (sortByName == "" || sortByName == "Z - A")
        {
            sortByName = "A - Z";
            AllGoods = AllGoods.OrderBy(x => x.Good.Name).ToList();
        }
        else
        {
            sortByName = "Z - A";
            AllGoods = AllGoods.OrderByDescending(x => x.Good.Name).ToList();
        }
    }

}
