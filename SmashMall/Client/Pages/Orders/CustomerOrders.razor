@page "/orders/customerorders"
@attribute [Authorize]

<h2>Customer orders</h2>

<div class="row">
    <div class="col-lg-2 col-md-3">
        <div class="d-none d-md-block">
            <div class="card border-0 shadow">
                <div class="card-body p-2">
                    <OrdersNavMenu />
                </div>
            </div>

        </div>
    </div>

    <div class="col-lg-10 col-md-9 mb-3 p-1">
        <div id="filtersNav" class="filters-nav bg-white d-md-none">
            <button class="btn closebtn custom-nav-link" onclick="closeNav()">&times;</button>
            <OrdersNavMenu />
        </div>

        <div class="card border-0">
            <div class="card-header bg-white">
                <span class="custom-bg-orange text-white p-2 mr-3 rounded d-md-none" style="cursor:pointer" onclick="openNav()"><strong>&#9776;</strong> </span>
                <span class="card-title"><strong> SORT BY</strong> </span>

                <button class="btn custom-bg-orange text-white ml-1" @onclick="SortByName">NAME @sortByName</button>
                <button class="btn custom-bg-orange text-white ml-1" @onclick="SortByDate">Date</button>
                <button class="btn custom-bg-orange text-white ml-1" @onclick="SortByOrderId">Order Id</button>

                <AuthorizeView Roles="Admin">
                    @{string all = "All"; }
                    <button class="btn @AllOrders ml-1 rounded" @onclick="()=>FilterOrders(all)">All orders</button>
                </AuthorizeView>
                @{ string approved = "Approved";}
                <button class="btn @Approved ml-1 rounded" @onclick="()=>FilterOrders(approved)">Approved orders</button>
                @{ string pending = "Pending";}
                <button class="btn @Pending ml-1 rounded" @onclick="()=>FilterOrders(pending)">Pending orders</button>

                <button class="btn custom-bg-orange text-white ml-1 float-right" disabled="@IsLoading" @onclick="GetOrders">
                    Reload

                    @if (IsLoading)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    else
                    {
                        <span class="oi oi-reload"></span>
                    }
                </button>
            </div>
            <div class="card-body bg-white p-0">
                @if (GoodOrders == null)
                {
                    <em>Loading</em>
                }
                else if (GoodOrders?.Count == 0)
                {
                    <div class="text-center">No orders available</div>
                }
                else
                {
                    @foreach (var orderId in OrderIds)
                    {
                        <details>
                            <summary class="alert">
                                <strong class="text-dark">
                                    Order Id : @orderId
                                </strong>
                                <span class="text-secondary float-right">
                                    Pickup station: @GoodOrders?.FirstOrDefault(x => x.UserOrderId == orderId)?.PickupStation?.Name, @GoodOrders?.FirstOrDefault(x => x.UserOrderId == orderId)?.PickupStation?.Description
                                    @if (GoodOrders?.FirstOrDefault(x => x.UserOrderId == orderId)?.LocalDelivery == true)
                                    {
                                        <span>(Delivery to home or office)</span>
                                    }
                                </span>
                            </summary>
                            <div class="row">
                                @foreach (var good in GoodOrders.Where(x => x.UserOrderId == orderId))
                                {
                                    <div class="col-lg-2 col-sm-3 col-4 rounded p-1">
                                        <div class="card border-0 custom-hover-shadow h-100">
                                            <div class="card-body p-1">
                                                <a href="goods/@good.Id/description" class="custom-nav-link">
                                                    @{var source = $"{BaseApi.Url}{BaseApi.ItemsPhotosApi}/{good.Good.Images?.FirstOrDefault()?.Name}";
                                                        <img src="@source" alt="@good.Good?.Name" class="mx-auto d-block custom-display-image rounded">
                                                    }
                                                    <div class="card-title">@good.Good?.Name</div>
                                                </a>

                                                <div class="card-text">Quantity: @good.Quantity</div>

                                                @{ var currency = new CurrencyConverter(good.TotalPrice, BaseApi.Culture);
                                                    <div class="card-text"><strong>@currency.Currency</strong></div>
                                                }
                                                <div class="form-check">
                                                    <label class="form-check-label">
                                                        <input type="checkbox" class="form-check-input" checked="@good.IsConfirmed" disabled="@good.IsConfirmed" @onchange="(e => Confirm(good, e))">
                                                        @if (good.IsConfirmed)
                                                        {
                                                            <span> Confirmed</span>
                                                        }
                                                        else
                                                        {
                                                            <span>Confirm</span>
                                                        }
                                                    </label>
                                                </div>
                                                @if (good.IsConfirmed)
                                                {
                                                    <div class="form-check">
                                                        <label class="form-check-label">
                                                            <input type="checkbox" class="form-check-input" checked="@good.IsApproved" disabled="@good.IsApproved" @onchange="(e) => Approve(good, e)">
                                                            @if (good.IsApproved)
                                                            {
                                                                <span> Approved</span>
                                                            }
                                                            else
                                                            {
                                                                <span>Approve</span>
                                                            }
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </details>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    private bool IsLoading { get; set; }
    private List<GoodOrder> AllGoodOrders { get; set; }
    private List<GoodOrder> GoodOrders { get; set; }
    private List<string> OrderIds { get; set; }
    private string AllOrders { get; set; }
    private string Approved { get; set; }
    private string Pending { get; set; }
    private string sortByDate = "";
    private string sortByName = "";
    private string sortByOrderId = "";

    protected override async Task OnInitializedAsync()
    {
        await GetOrders();
    }

    private async Task GetOrders()
    {
        try
        {
            IsLoading = true;
            AllGoodOrders = await _httpClient.GetFromJsonAsync<List<GoodOrder>>($"api/orders/seller");
            OrderIds = AllGoodOrders?.Select(x => x.UserOrderId).Distinct().ToList();
            IsLoading = false;
            FilterOrders("Pending");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void FilterOrders(string value)
    {
        switch (value)
        {
            case "Approved":
                Approved = "btn-secondary";
                Pending = "btn-primary";
                AllOrders = "btn-primary";
                GoodOrders = AllGoodOrders.Where(x => x.IsApproved == true).ToList();
                break;
            case "Pending":
                Pending = "btn-secondary";
                Approved = "btn-primary";
                AllOrders = "btn-primary";

                GoodOrders = AllGoodOrders.Where(x => x.IsApproved == false).ToList();
                break;
            case "All":
            default:
                AllOrders = "btn-secondary";
                Pending = "btn-primary";
                Approved = "btn-primary";
                GoodOrders = AllGoodOrders;
                break;
        }
    }

    private async Task Confirm(GoodOrder order, ChangeEventArgs e)
    {
        var confirm = Convert.ToBoolean(e.Value);
        @if (confirm)
        {
            try
            {
                order.IsConfirmed = true;
                var result = await _httpClient.PutAsJsonAsync($"api/orders", order);
                @if (result.IsSuccessStatusCode)
                {
                    await GetOrders();
                    if (Pending == "btn-secondary")
                        FilterOrders("Pending");
                }
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
            catch { }
        }
    }

    private async Task Approve(GoodOrder order, ChangeEventArgs e)
    {
        var confirm = Convert.ToBoolean(e.Value);
        @if (confirm)
        {
            try
            {
                order.IsApproved = true;
                var result = await _httpClient.PutAsJsonAsync($"api/orders", order);
                @if (result.IsSuccessStatusCode)
                {
                    await GetOrders();
                    if (Pending == "btn-secondary")
                        FilterOrders("Pending");
                }
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
            catch { }
        }
    }

    private void SortByName()
    {
        if (sortByName == "" || sortByName == "Z - A")
        {
            sortByName = "A - Z";
            GoodOrders = GoodOrders.OrderBy(x => x.Good.Name).ToList();
        }
        else
        {
            sortByName = "Z - A";
            GoodOrders = GoodOrders.OrderByDescending(x => x.Good.Name).ToList();
        }
    }

    private void SortByDate()
    {
        if (sortByDate == "" || sortByDate == "desc")
        {
            sortByDate = "asc";
            GoodOrders = GoodOrders.OrderBy(x => x.OrderDate).ToList();
        }
        else
        {
            sortByDate = "desc";
            GoodOrders = GoodOrders.OrderByDescending(x => x.OrderDate).ToList();
        }
    }

    private void SortByOrderId()
    {
        if (sortByOrderId == "" || sortByOrderId == "desc")
        {
            sortByOrderId = "asc";
            OrderIds = OrderIds.OrderBy(x => x).ToList();
        }
        else
        {
            sortByOrderId = "desc";
            OrderIds = OrderIds.OrderByDescending(x => x).ToList();
        }
    }

}

